// Code generated by schema-generate. DO NOT EDIT.
package gen_schema
import (
	"gopkg.in/yaml.v3"
)

// NormalJob Each job must have an id to associate with the job. The key job_id is a string and its value is a map of the job's configuration data. You must replace <job_id> with a string that is unique to the jobs object. The <job_id> must start with a letter or _ and contain only alphanumeric characters, -, or _.
type NormalJob struct {

  // The name of the job displayed on GitHub.
  Name NameRaw `yaml:"name,omitempty"`

  // A job contains a sequence of tasks called steps. Steps can run commands, run setup tasks, or run an action in your repository, a public repository, or an action published in a Docker registry. Not all steps run actions, but all actions run as a step. Each step runs in its own process in the virtual environment and has access to the workspace and filesystem. Because steps run in their own process, changes to environment variables are not preserved between steps. GitHub provides built-in steps to set up and complete a job.
  // 
  Steps StepsRaw `yaml:"steps,omitempty"`
}

// Steps 
type Steps struct {

  // A unique identifier for the step. You can use the id to reference the step in contexts. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions.
  Id IdRaw `yaml:"id,omitempty"`

  // You can use the if conditional to prevent a step from running unless a condition is met. You can use any supported context and expression to create a conditional.
  // Expressions in an if conditional do not require the ${{ }} syntax. For more information, see https://help.github.com/en/articles/contexts-and-expression-syntax-for-github-actions.
  If IfRaw `yaml:"if,omitempty"`

  // A name for your step to display on GitHub.
  Name NameRaw `yaml:"name,omitempty"`

  // Runs command-line programs using the operating system's shell. If you do not provide a name, the step name will default to the text specified in the run command.
  // Commands run using non-login shells by default. You can choose a different shell and customize the shell used to run commands. For more information, see https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#using-a-specific-shell.
  // Each run keyword represents a new process and shell in the virtual environment. When you provide multi-line commands, each line runs in the same shell.
  Run RunRaw `yaml:"run,omitempty"`

  // The maximum number of minutes to run the step before killing the process.
  TimeoutMinutes TimeoutMinutesRaw `yaml:"timeout-minutes,omitempty"`

  // Selects an action to run as part of a step in your job. An action is a reusable unit of code. You can use an action defined in the same repository as the workflow, a public repository, or in a published Docker container image (https://hub.docker.com/).
  // We strongly recommend that you include the version of the action you are using by specifying a Git ref, SHA, or Docker tag number. If you don't specify a version, it could break your workflows or cause unexpected behavior when the action owner publishes an update.
  // - Using the commit SHA of a released action version is the safest for stability and security.
  // - Using the specific major action version allows you to receive critical fixes and security patches while still maintaining compatibility. It also assures that your workflow should still work.
  // - Using the master branch of an action may be convenient, but if someone releases a new major version with a breaking change, your workflow could break.
  // Some actions require inputs that you must set using the with keyword. Review the action's README file to determine the inputs required.
  // Actions are either JavaScript files or Docker containers. If the action you're using is a Docker container you must run the job in a Linux virtual environment. For more details, see https://help.github.com/en/articles/virtual-environments-for-github-actions.
  Uses UsesRaw `yaml:"uses,omitempty"`
}

// WorkflowRoot 
type WorkflowRoot struct {

  // A workflow run is made up of one or more jobs. Jobs run in parallel by default. To run jobs sequentially, you can define dependencies on other jobs using the jobs.<job_id>.needs keyword.
  // Each job runs in a fresh instance of the virtual environment specified by runs-on.
  // You can run an unlimited number of jobs as long as you are within the workflow usage limits. For more information, see https://help.github.com/en/github/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#usage-limits.
  Jobs JobsRaw `yaml:"jobs,omitempty"`

  // The name of your workflow. GitHub displays the names of your workflows on your repository's actions page. If you omit this field, GitHub sets the name to the workflow's filename.
  Name NameRaw `yaml:"name,omitempty"`

}

type StepsRaw struct {
	Raw *yaml.Node
	Value []*Steps
}


func (node *StepsRaw) UnmarshalYAML(value *yaml.Node) error {
	node.Raw = value
	return value.Decode(&node.Value)
}


type IdRaw struct {
	Raw *yaml.Node
	Value string
}


func (node *IdRaw) UnmarshalYAML(value *yaml.Node) error {
	node.Raw = value
	return value.Decode(&node.Value)
}


type IfRaw struct {
	Raw *yaml.Node
	Value string
}


func (node *IfRaw) UnmarshalYAML(value *yaml.Node) error {
	node.Raw = value
	return value.Decode(&node.Value)
}


type RunRaw struct {
	Raw *yaml.Node
	Value string
}


func (node *RunRaw) UnmarshalYAML(value *yaml.Node) error {
	node.Raw = value
	return value.Decode(&node.Value)
}


type TimeoutMinutesRaw struct {
	Raw *yaml.Node
	Value float64
}


func (node *TimeoutMinutesRaw) UnmarshalYAML(value *yaml.Node) error {
	node.Raw = value
	return value.Decode(&node.Value)
}


type UsesRaw struct {
	Raw *yaml.Node
	Value string
}


func (node *UsesRaw) UnmarshalYAML(value *yaml.Node) error {
	node.Raw = value
	return value.Decode(&node.Value)
}


type JobsRaw struct {
	Raw *yaml.Node
	Value *NormalJob
}


func (node *JobsRaw) UnmarshalYAML(value *yaml.Node) error {
	node.Raw = value
	return value.Decode(&node.Value)
}


type NameRaw struct {
	Raw *yaml.Node
	Value string
}


func (node *NameRaw) UnmarshalYAML(value *yaml.Node) error {
	node.Raw = value
	return value.Decode(&node.Value)
}


