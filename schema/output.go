package generate

import (
	"bytes"
	"fmt"
	"io"
	"sort"
	"strings"
)

func getOrderedFieldNames(m map[string]Field) []string {
	keys := make([]string, len(m))
	idx := 0
	for k := range m {
		keys[idx] = k
		idx++
	}
	sort.Strings(keys)
	return keys
}

func getOrderedStructNames(m map[string]Struct) []string {
	keys := make([]string, len(m))
	idx := 0
	for k := range m {
		keys[idx] = k
		idx++
	}
	sort.Strings(keys)
	return keys
}

// Output generates code and writes to w.
func Output(w io.Writer, g *Generator, pkg string) {
	structs := g.Structs

	fmt.Fprintln(w, "// Code generated by schema-generate. DO NOT EDIT.")
	fmt.Fprintf(w, "package %v\n", "gen_schema")

	// write all the code into a buffer, compiler functions will return list of imports
	// write list of imports into main output stream, followed by the code
	codeBuf := new(bytes.Buffer)
	imports := []string{
		"gopkg.in/yaml.v3",
	}

	if len(imports) > 0 {
		fmt.Fprint(w, "import (")
		for _, importfile := range imports {
			fmt.Fprintf(w, "\n\t\"%s\"", importfile)
		}
		fmt.Fprintln(w, "\n)")
	}

	for _, k := range getOrderedStructNames(structs) {
		s := structs[k]

		fmt.Fprintln(w, "")
		outputNameAndDescriptionComment(s.Name, s.Description, w)
		fmt.Fprintf(w, "type %s struct {\n", s.Name)

		for _, fieldKey := range getOrderedFieldNames(s.Fields) {
			f := s.Fields[fieldKey]

			// Only apply omitempty if the field is not required.
			omitempty := ",omitempty"
			if f.Required {
				omitempty = ""
			}

			if f.Description != "" {
				outputFieldDescriptionComment(f.Description, w)
			}
			fmt.Fprintf(w, "  %s %s `yaml:\"%s%s\"`\n", f.Name, f.Name+"Raw", f.JSONName, omitempty)

			emitRawYAMLNodeCode(codeBuf, f.Name, f.Type)
			emitUnMarshalCode(codeBuf, f.Name)
		}

		fmt.Fprintln(w, "}")
	}

	// write code after structs for clarity
	w.Write(codeBuf.Bytes())
}

func emitRawYAMLNodeCode(w io.Writer, fieldName string, fieldType string) {
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "type %s struct {\n", fieldName+"Raw")
	fmt.Fprintf(w, "\tRaw *yaml.Node\n")
	fmt.Fprintf(w, "\tValue %s\n", fieldType)
	fmt.Fprintln(w, "}")
	fmt.Fprintf(w, "\n")
}

func emitUnMarshalCode(w io.Writer, fieldName string) {
	fmt.Fprintf(w, "\n")
	fmt.Fprintf(w, "func (node *%s) UnmarshalYAML(value *yaml.Node) error {\n", fieldName+"Raw")
	fmt.Fprintf(w, "\tnode.Raw = value\n")
	fmt.Fprintf(w, "\treturn value.Decode(&node.Value)\n")
	fmt.Fprintf(w, "}\n")
	fmt.Fprintf(w, "\n")
}

func outputNameAndDescriptionComment(name, description string, w io.Writer) {
	if strings.Index(description, "\n") == -1 {
		fmt.Fprintf(w, "// %s %s\n", name, description)
		return
	}

	dl := strings.Split(description, "\n")
	fmt.Fprintf(w, "// %s %s\n", name, strings.Join(dl, "\n// "))
}

func outputFieldDescriptionComment(description string, w io.Writer) {
	if strings.Index(description, "\n") == -1 {
		fmt.Fprintf(w, "\n  // %s\n", description)
		return
	}

	dl := strings.Split(description, "\n")
	fmt.Fprintf(w, "\n  // %s\n", strings.Join(dl, "\n  // "))
}

func cleanPackageName(pkg string) string {
	pkg = strings.Replace(pkg, ".", "", -1)
	pkg = strings.Replace(pkg, "_", "", -1)
	pkg = strings.Replace(pkg, "-", "", -1)
	return pkg
}
